package hello.proxy;

public class Explain {
    /**
     * AOP 부가 기능 로직을 실제 로직에 추가하는 3가지 방법
     * 컴파일시점
     * 클래스 로딩 시점
     * 런타임 시점(프록시)
     *
     * - 컴파일 시점
     * .JAVA 소스코드를 컴파일러를 사용해서 .CLASS를 만드는 시점에 부가 기능 로직을 추가할 수 있다.
     * 이때 AspectJ가 제공하는 특별한 컴파일러를 사용해야 한다.
     * -> 이걸 위빙(Weaving)이라고 한다.
     *
     *  단점 : 특별한 컴파일러가 필요하고 복잡하다.
     *
     * - 클래스 로딩 시점
     * 자바를 실행하면 .CLASS 파일을 JVM 내부의 클래스 보관한다.
     * 이때 중간에서 .CLASS 파일을 조작한다음 JVM에 올릴 수 있다.
     * (Instrumentation), 수 많은 모니터링 툴들이 이방식을 사용
     * -> 이걸 로드 타임 위빙이라고 한다.
     *
     * 단점 : 로드 타임 위빙은 자바를 실행할 때 java -javaagent를 통해 클래스 로더 조작기를 지정해야 하는데,
     * 이 부분이 번거롭고 운영하기 어렵다.
     *
     * - 런타임 시점(주로 씀)
     * 자바의 메인 메서드가 이미 실행한 다음이다.
     * 자바 언어가 제공하는 범위 안에서 부가 기능을 적용
     * 스프링 컨테이너, 프록시, DI, 빈 포스트 프로세서 같은 개념을 총 동원
     * -> 프록시 방식의 AOP
     *
     * 단점 : 프록시를 사용하기 때문에 AOP 기능에 일부 제약이 있다.
     * (생성자에는 프록시를 적용할수 없다..?)
     *
     * - 정리
     * 컴파일 시점: 실제 대상 코드에 에스팩트를 통한 부가 기능 호출 코드가 포함된다. AspectJ를 직접 사용해야 한다.
     * 클래스 로딩 시점: 실제 대상 코드에 애스팩트를 통한 부가 기능 호출 코드가 포함된다. AspectJ를 직접 사용해야 한다.
     * 런타임 시점: 실제 대상 코드는 그대로 유지된다. 대신에 프록시를 통해 부가 기능이 적용된다. 항상 프록시를 통해야 부가 기능을 사용할 수 있다. 스프링 AOP는 이방식
     *
     * AOP 적용 위치(조인 포인트)
     * AOP 적용 가능 위치 : 생성자, 필드 값 접근, static 메서드접근, 메서드 실행
     * -> 바이트 코드를 실제로 조작해서 모든 지점에 가능하다.
     * 프록시 AOP 방식 :메서드 실행 지점에만 AOP를 적용할 수 있다.
     * -> 프록시를 메서드 오버라이딩 개념으로 동작한다. 따라서 static 메서드, 필드 값 접근에는 프록시 개념이 적용될 수 없다.
     * +++ 스프링 빈에만 적용할 수 있다.
     *
     *
     * - 참고
     * 스프링은 AspectJ의 문법을 차용하고 프록시 방식의 AOP를 적용한다. AspectJ를 직접 사용하는 것이 아니다.
     *
     *
     * 용어 정리
     *
     * 조인 포인트(Join point)
     * 어드바이스가 적용될 수 있는 위치 또는 AOP가 적용될 수 있는 위치
     * 메소드 실행, 생성자 호출, 필드 값 접근, static 메서드 접근 같은 프로그램 실행중 지점
     *
     * 조인 포인트는 추상적인 개념이다. AOP를 적용할 수 있는 모든 지점
     * 스프링 AOP는 프록시 방식을 사용하므로 조인 포인트는 항상 메소드 실행 지점으로 제한된다.
     *
     * 포인트컷(Pointcut)
     * 조인 포인트 중에서 어드바이스가 적용될 위치를 선별하는 기능
     * 주로 AspectJ 표현식을 사용해서 지정
     * 프록시를 사용하는 스프링 AOP는 메서드 실행 지점만 포인트컷으로 선별 가능
     *
     * 타겟(Target)
     * = 부가기능
     * 어드바이스를 받는 객체, 포인트컷으로 결정
     * @Around @Before @After 같은 다양한 종류의 어드바이스가 있음
     *
     * 애스펙트(Aspect)
     * 어드바이스 + 포인트컷을 모듈화 한 것
     * @Aspect를 생각하면 됨
     * 여러 어드바이스와 포인트 컷이 함께 존재
     *
     * 어드바이저(Advisor)
     * 하나의 어드바이스와 하나의 포인트 컷으로 구성
     * 스프링 AOP에서만 사용되는 특별한 용어
     *
     * 위빙(Weaving)
     * 포인트 컷으로 결정한 타겟의 조인 포인트에 어드바이스를 적용하는 것
     * 위빙을 통해 핵심 기능 코드에 영향을 주지 않고 부가 기능을 추가할 수 있음
     * AOP 적용을 위해 애스펙트를 객체에 연결한 상태
     * - 컴파일 타임(AspectJ compiler)
     * - 로드 타임
     * - 런타임, 스프링 AOP는 런타임, 프록시 방식
     *
     * AOP 프록시
     * AOP 기능을 구현하기 위해 만든 프록시 객체, 스프링에서 AOP 프록시는 JDK 동적 프록시 또는 CGLIB 프록시이다.
     *
     *
     *
     *
     *
     * /
}
